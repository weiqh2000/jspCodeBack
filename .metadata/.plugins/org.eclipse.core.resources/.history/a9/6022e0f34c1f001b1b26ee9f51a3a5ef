package com.lcvc.ebuy.bean;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List; 

import com.lcvc.ebuy.model.Admin;


/**
 * 用来处理管理账户业务的所有方法
 * @author S6203-1-08
 *
 */
public class AdminBean {
	/**
	 * 处理管理账户登录
	 * @param username用户名
	 * @param password密码
	 * @return true表示登录成功 false表示登录失败
	 */
         public boolean login(String username,String password){
        	 boolean result=false;//默认失败
        	 try {
     			Connection connection=DBHelper.getConnection();
     			String sql="select * from admin where username=? and userpass=?";//定义一个字符串
     			PreparedStatement pstmt=connection.prepareStatement(sql);//这个对象可以用来将sql语句发送到数据库（准备发送）
     			pstmt.setString(1,username);
     			pstmt.setString(2,password);
     			ResultSet rs=pstmt.executeQuery();//pstmt.executeQuery()表示将sql语句真的发送到数据库，并且返回查询结果
     			if(rs.next()){//如果能找到下一条记录
     				int number=rs.getInt(1);
     				result=true;
     			}
     			DBHelper.closeConn(connection, pstmt, rs);
     		} catch (SQLException e){//catch表示出现异常就执行括号内的代码
     			e.printStackTrace();
     		} 
        	 return result;
         }
         /**
          * 根据账户名来读取指定信息的账户（模拟从数据库查找）
          * @param username
          * @return null表示找不到相关的记录
          */
         public Admin getAdmin(String username){
        	 Admin admin=null;
        	 try {
        		Connection connection=DBHelper.getConnection();
      			String sql="select * from admin where username='"+username+"'";//定义一个字符串
      			PreparedStatement pstmt=connection.prepareStatement(sql);//这个对象可以用来将sql语句发送到数据库（准备发送）
      			ResultSet rs=pstmt.executeQuery();//pstmt.executeQuery()表示将sql语句真的发送到数据库，并且返回查询结果
      			if(rs.next()){//如果能找到下一条记录
      				 admin=new Admin();
      				 admin.setUsername(rs.getString("username"));
      				 admin.setPassword(rs.getString("userpass"));
           		     admin.setScreename(rs.getString("screename"));
           		     admin.setUserId(rs.getInt("userId"));
           		     //admin.setCreateTime(new Date());表示当前的时间
      			}
      			DBHelper.closeConn(connection, pstmt, rs);//关闭数据库
      		} catch (SQLException e){//catch表示出现异常就执行括号内的代码
      			e.printStackTrace();
      		} 
        	 return admin;
          }
         
         /**管理员后台页面
          * 从数据库表admin中获取所有的数据
          * @return 返回从admin表中找到的所有记录
          */
         public List<Admin> getAdmins(){//获管理员所有列表
        	 List<Admin> admins=new ArrayList<Admin>();//定义一个list集合（有序是list 无序是set集合）
        	 try{
        		 Connection connection=DBHelper.getConnection();//数据库的连接
        		 String sql="select*from admin";
        		 PreparedStatement pstmt=connection.prepareStatement(sql);//这个对象可以用来将sql语句发送到数据库（准备发送）
        		 ResultSet rs=pstmt.executeQuery();//pstmt.executeQuery()表示将sql语句真的发送到数据库，并且返回查询结果
        		 while(rs.next()){//只要能找到下一行
        			 Admin admin=new Admin();//创建了一个admin对象，用于保存admin表中的一条记录
      				 admin.setUsername(rs.getString("username"));
      				 admin.setPassword(rs.getString("userpass"));
           		     admin.setScreename(rs.getString("screename"));
           		     admin.setUserId(rs.getInt("userId"));
           		     admin.setCreateTime(rs.getTimestamp("createTime"));//表示当前的时间
           		     admins.add(admin);//将获取到的对象添加进来
        		 }
        		 
        		 DBHelper.closeConn(connection, pstmt, rs);//关闭数据库
        	 }catch (SQLException e){//catch表示出现SQLException异常就执行括号内的代码
       			e.printStackTrace();
        	 }
        	 
        	 return admins;
        	 
         }
         
         
         
}
