package com.lcvc.ebuy.bean;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import com.lcvc.ebuy.model.Admin;
import org.junit.Test;

import com.lcvc.ebuy.model.Admin;

/**
 * 根据用户名获取相应的Admin对象（模拟从数据库获取）
 * @pram username
 * @return null表示没有找到
 *
 */
public class AdminBean {


	 private AdminBean adminBean;
	/**
	    * 测试数据库的连接
	    */
		@Test
	public boolean login(String username,String password){
		boolean result=false;


			try{
                Connection connection=DBHelper.getConnection();
				String sql="select * from admin where username=? and password=? ";//定义一个字符串
				PreparedStatement pstmt=connection.prepareStatement(sql);//这个对象可以用来将sql语句发送到数据库（准备发送）
				pstmt.setString(1, username);
				pstmt.setString(2, password);
				ResultSet rs=pstmt.executeQuery();//pstmt.executeQuery()表示sql语句真的发送到数据库，并且返回查询结果
//			if(username.equals("user")){
//				admin=new Admin();
//				//admin.setUserId(1);
//				admin.setUsername(rs.getString("username"));
//				admin.setPassword(rs.getString("password"));
//				admin.setScreenName(rs.getString("screenName"));
//				admin.setUserId(rs.getInt("userId"));
//				//admin.setCreatTime(new Date());//new Date()表示时间
//				
//			} 
				if(rs.next()){
					int number=rs.getInt(1);//获取记录总数
					if(number>0){
						result=true;
					}
				}
			     DBHelper.closeConn(connection, pstmt, rs);//关闭数据库	
			}   catch(SQLException e){//catch表示，如果出现SQLException异常，就执行括号内的代码
				e.printStackTrace();
			}	
            	return result;
	}
        
	 /**
	  * 根据账户名读取指定的账户信息(模拟从数据库chaz)
	  * @param username
	  * @return null表示找不到相关的记录
	  */
	     public Admin getAdmin(String username){
	            Admin admin=null;
	            try{
                    Connection connection=DBHelper.getConnection();
					String sql="select  * from admin where username='"+username+"'";
					PreparedStatement pstmt=connection.prepareStatement(sql);//这个对象可以用来将sql语句发送到数据库（准备发送）
					ResultSet rs=pstmt.executeQuery();//pstmt.executeQuery()表示sql语句真的发送到数据库，并且返回查询结果
					if(rs.next()){//如果找到下一条记录
						int number=rs.getInt(1);//获取记录总数
						admin=new Admin();
						
						//admin.setUserId(1);
						admin.setUsername(rs.getString("username"));
						admin.setPassword(rs.getString("password"));
						admin.setScreenName(rs.getString("screenName"));
			     		admin.setUserId(rs.getInt("userId"));
						//admin.setCreatTime(new Date());//new Date()表示时间
					}
					 DBHelper.closeConn(connection, pstmt, rs);//关闭数据库		
				}   catch(SQLException e){//catch表示，如果出现SQLException异常，就执行括号内的代码
					e.printStackTrace();
			}	
//	    		if(username.equals("user")){
//	    			admin=new Admin();
//	    			admin.setUserId(1);
//	    			admin.setUsername("user");
//	    			admin.setPassword("123456");
//	    			admin.setScreenName("李四");
//	    			admin.setCreatTime(new Date());
//	    			
//	    		}
	    		return admin;
	    		
		}
	   /**
	    * 从数据库中读取admin中的所有数据
	    * @turen 返回admin表中找到的所有记录
	    */
	     public List<Admin> getAdmins(){   	 
	    	 List<Admin> admins=new ArrayList<Admin>();//定义一个list(有序)
	    	 try{
	    		 Connection connection=DBHelper.getConnection();
		    	 String sql="select * from admin";
		    	 PreparedStatement pstmt=connection.prepareStatement(sql);//这个对象可以用来将sql语句发送到数据库（准备发送）
				 ResultSet rs=pstmt.executeQuery();//pstmt.executeQuery()表示sql语句真的发送到数据库，并且返回查询结果
		    	 while(rs.next()){//只要能找到下一条记录(行)
		    		Admin admin=new Admin();//创建一个admind对象，用于保存admin中的一条记录
					admin.setUsername(rs.getString("username"));
					admin.setPassword(rs.getString("password"));
					admin.setScreenName(rs.getString("screenName"));
		     		admin.setUserId(rs.getInt("userId"));
					admin.setCreatTime(rs.getTimestamp("createTime"));//new Date()表示时间
				    admins.add(admin);
		    	}
				 DBHelper.closeConn(connection,pstmt,rs);//关闭数据库
		    	  
	    	 } catch(SQLException e){//catch表示，如果出现SQLException异常，就执行括号内的代码
					e.printStackTrace();
			}
			return admins;	
	    	 
	    	 
	     }
	    /**
	     * 删除指定账户
	     * @param userId admin的标志符，主键
	     * return true 表示删除成功，false表示删除失败
	     */
	     public static boolean deleteAamin(Integer userId){
	    	 boolean status=false;//默认删除失败
	    	 try{
	    		 Connection connection=DBHelper.getConnection();
	    		 String sql="delete from admin where userId=?";//表示占位符
	    		 PreparedStatement pstmt=connection.prepareStatement(sql);//这个对象可以用来将sql语句发送到数据库（准备发送
	    		 pstmt.setInt(1, userId);
	    		 int number=pstmt.executeUpdate();//数据库的增加、编辑、删除记录用executeUpdate().executeUpdate()会将影响的记录结果，即删除了多少条记录以整数返回
	      	     if (number>0){
	      	    	 status=true;
	      	     }
	    		 DBHelper.closeConn(connection,pstmt,null);//关闭数据库  
	    	 } catch(SQLException e){//catch表示，如果出现SQLException异常，就执行括号内的代码
					e.printStackTrace();
			}
			return status;
	   
	     }
}
	     